#compdef swiftlint
local context state state_descr line
_swiftlint_commandname=$words[1]
typeset -A opt_args

_swiftlint() {
    integer ret=1
    local -a args
    args+=(
        '--version[Show the version.]'
        '(-h --help)'{-h,--help}'[Show help information.]'
        '(-): :->command'
        '(-)*:: :->arg'
    )
    _arguments -w -s -S $args[@] && ret=0
    case $state in
        (command)
            local subcommands
            subcommands=(
                'analyze:Run analysis rules'
                'docs:Open SwiftLint documentation website in the default web browser'
                'generate-docs:Generates markdown documentation for selected group of rules'
                'lint:Print lint warnings and errors'
                'baseline:Operations on existing baselines'
                'reporters:Display the list of reporters and their identifiers'
                'rules:Display the list of rules and their identifiers'
                'version:Display the current version of SwiftLint'
                'help:Show subcommand help information.'
            )
            _describe "subcommand" subcommands
            ;;
        (arg)
            case ${words[1]} in
                (analyze)
                    _swiftlint_analyze
                    ;;
                (docs)
                    _swiftlint_docs
                    ;;
                (generate-docs)
                    _swiftlint_generate-docs
                    ;;
                (lint)
                    _swiftlint_lint
                    ;;
                (baseline)
                    _swiftlint_baseline
                    ;;
                (reporters)
                    _swiftlint_reporters
                    ;;
                (rules)
                    _swiftlint_rules
                    ;;
                (version)
                    _swiftlint_version
                    ;;
                (help)
                    _swiftlint_help
                    ;;
            esac
            ;;
    esac

    return ret
}

_swiftlint_analyze() {
    integer ret=1
    local -a args
    args+=(
        '*--config[The path to one or more SwiftLint configuration files, evaluated as a parent-child hierarchy.]:config:'
        '(--fix --autocorrect)'{--fix,--autocorrect}'[Correct violations whenever possible.]'
        '--format[Should reformat the Swift files using the same mechanism used by Xcode (via SourceKit).
        Only applied with `--fix`/`--autocorrect`.]'
        '--use-alternative-excluding[Use an alternative algorithm to exclude paths for `excluded`, which may be faster in some cases.]'
        '--use-script-input-files[Read SCRIPT_INPUT_FILE* environment variables as files.]'
        '--use-script-input-file-lists[Read SCRIPT_INPUT_FILE_LIST* environment variables as file lists.]'
        '--strict[Upgrades warnings to serious violations (errors).]'
        '--lenient[Downgrades serious violations to warnings, warning threshold is disabled.]'
        '--force-exclude[Exclude files in config `excluded` even if their paths are explicitly specified.]'
        '--benchmark[Save benchmarks to `benchmark_files.txt` and `benchmark_rules.txt`.]'
        '--reporter[The reporter used to log errors and warnings.]:reporter:'
        '--baseline[The path to a baseline file, which will be used to filter out detected violations.]:baseline:'
        '--write-baseline[The path to save detected violations to as a new baseline.]:write-baseline:'
        '--working-directory[The working directory to use when running SwiftLint.]:working-directory:'
        '--output[The file where violations should be saved. Prints to stdout by default.]:output:'
        '--progress[Show a live-updating progress bar instead of each file being processed.]'
        '--check-for-updates[Check whether a later version of SwiftLint is available after processing all files.]'
        '--quiet[Don'"'"'t print status logs like '"'"'Analyzing <file>'"'"' & '"'"'Done analyzing'"'"'.]'
        '--compiler-log-path[The path of the full xcodebuild log to use when running AnalyzerRules.]:compiler-log-path:'
        '--compile-commands[The path of a compilation database to use when running AnalyzerRules.]:compile-commands:'
        '*--only-rule[Run only the specified rule, ignoring `only_rules`, `opt_in_rules` and `disabled_rules`.
        Can be specified repeatedly to run multiple rules.]:only-rule:'
        ':paths:'
        '--version[Show the version.]'
        '(-h --help)'{-h,--help}'[Show help information.]'
    )
    _arguments -w -s -S $args[@] && ret=0

    return ret
}

_swiftlint_docs() {
    integer ret=1
    local -a args
    args+=(
        ':rule-id:'
        '--version[Show the version.]'
        '(-h --help)'{-h,--help}'[Show help information.]'
    )
    _arguments -w -s -S $args[@] && ret=0

    return ret
}

_swiftlint_generate-docs() {
    integer ret=1
    local -a args
    args+=(
        '--path[The directory where the documentation should be saved]:path:'
        '--config[The path to a SwiftLint configuration file]:config:'
        '(--enabled -e)'{--enabled,-e}'[Only show enabled rules]'
        '(--disabled -d)'{--disabled,-d}'[Only show disabled rules]'
        '(--correctable -c)'{--correctable,-c}'[Only display correctable rules]'
        '--version[Show the version.]'
        '(-h --help)'{-h,--help}'[Show help information.]'
    )
    _arguments -w -s -S $args[@] && ret=0

    return ret
}

_swiftlint_lint() {
    integer ret=1
    local -a args
    args+=(
        '*--config[The path to one or more SwiftLint configuration files, evaluated as a parent-child hierarchy.]:config:'
        '(--fix --autocorrect)'{--fix,--autocorrect}'[Correct violations whenever possible.]'
        '--format[Should reformat the Swift files using the same mechanism used by Xcode (via SourceKit).
        Only applied with `--fix`/`--autocorrect`.]'
        '--use-alternative-excluding[Use an alternative algorithm to exclude paths for `excluded`, which may be faster in some cases.]'
        '--use-script-input-files[Read SCRIPT_INPUT_FILE* environment variables as files.]'
        '--use-script-input-file-lists[Read SCRIPT_INPUT_FILE_LIST* environment variables as file lists.]'
        '--strict[Upgrades warnings to serious violations (errors).]'
        '--lenient[Downgrades serious violations to warnings, warning threshold is disabled.]'
        '--force-exclude[Exclude files in config `excluded` even if their paths are explicitly specified.]'
        '--benchmark[Save benchmarks to `benchmark_files.txt` and `benchmark_rules.txt`.]'
        '--reporter[The reporter used to log errors and warnings.]:reporter:'
        '--baseline[The path to a baseline file, which will be used to filter out detected violations.]:baseline:'
        '--write-baseline[The path to save detected violations to as a new baseline.]:write-baseline:'
        '--working-directory[The working directory to use when running SwiftLint.]:working-directory:'
        '--output[The file where violations should be saved. Prints to stdout by default.]:output:'
        '--progress[Show a live-updating progress bar instead of each file being processed.]'
        '--check-for-updates[Check whether a later version of SwiftLint is available after processing all files.]'
        '--use-stdin[Lint standard input.]'
        '--quiet[Don'"'"'t print status logs like '"'"'Linting <file>'"'"' & '"'"'Done linting'"'"'.]'
        '--silence-deprecation-warnings[Don'"'"'t print deprecation warnings.]'
        '--cache-path[The directory of the cache used when linting.]:cache-path:'
        '--no-cache[Ignore cache when linting.]'
        '--enable-all-rules[Run all rules, even opt-in and disabled ones, ignoring `only_rules`.]'
        '*--only-rule[Run only the specified rule, ignoring `only_rules`, `opt_in_rules` and `disabled_rules`.
        Can be specified repeatedly to run multiple rules.]:only-rule:'
        ':paths:'
        '--version[Show the version.]'
        '(-h --help)'{-h,--help}'[Show help information.]'
    )
    _arguments -w -s -S $args[@] && ret=0

    return ret
}

_swiftlint_baseline() {
    integer ret=1
    local -a args
    args+=(
        '--version[Show the version.]'
        '(-h --help)'{-h,--help}'[Show help information.]'
        '(-): :->command'
        '(-)*:: :->arg'
    )
    _arguments -w -s -S $args[@] && ret=0
    case $state in
        (command)
            local subcommands
            subcommands=(
                'report:Reports the violations in a baseline.'
                'compare:Reports the violations that are present in another baseline but not in the original baseline.'
            )
            _describe "subcommand" subcommands
            ;;
        (arg)
            case ${words[1]} in
                (report)
                    _swiftlint_baseline_report
                    ;;
                (compare)
                    _swiftlint_baseline_compare
                    ;;
            esac
            ;;
    esac

    return ret
}

_swiftlint_baseline_report() {
    integer ret=1
    local -a args
    args+=(
        ':baseline:'
        '--reporter[The reporter used to report violations. The '"'"'summary'"'"' reporter can be useful to provide an overview.]:reporter:'
        '--output[The file where violations should be saved. Prints to stdout by default.]:output:'
        '--version[Show the version.]'
        '(-h --help)'{-h,--help}'[Show help information.]'
    )
    _arguments -w -s -S $args[@] && ret=0

    return ret
}

_swiftlint_baseline_compare() {
    integer ret=1
    local -a args
    args+=(
        ':baseline:'
        '--other-baseline[The path to a second baseline to compare against the baseline. Violations in the second baseline that are not present in the original baseline will be reported.]:other-baseline:'
        '--reporter[The reporter used to report violations. The '"'"'summary'"'"' reporter can be useful to provide an overview.]:reporter:'
        '--output[The file where violations should be saved. Prints to stdout by default.]:output:'
        '--version[Show the version.]'
        '(-h --help)'{-h,--help}'[Show help information.]'
    )
    _arguments -w -s -S $args[@] && ret=0

    return ret
}

_swiftlint_reporters() {
    integer ret=1
    local -a args
    args+=(
        '--version[Show the version.]'
        '(-h --help)'{-h,--help}'[Show help information.]'
    )
    _arguments -w -s -S $args[@] && ret=0

    return ret
}

_swiftlint_rules() {
    integer ret=1
    local -a args
    args+=(
        '--config[The path to a SwiftLint configuration file]:config:'
        '(--enabled -e)'{--enabled,-e}'[Only show enabled rules]'
        '(--disabled -d)'{--disabled,-d}'[Only show disabled rules]'
        '(--correctable -c)'{--correctable,-c}'[Only display correctable rules]'
        '(--verbose -v)'{--verbose,-v}'[Display full configuration details]'
        '--config-only[Print only the YAML configuration(s)]'
        '--default-config[Print default configuration(s)]'
        ':rule-id:'
        '--version[Show the version.]'
        '(-h --help)'{-h,--help}'[Show help information.]'
    )
    _arguments -w -s -S $args[@] && ret=0

    return ret
}

_swiftlint_version() {
    integer ret=1
    local -a args
    args+=(
        '--verbose[Display full version info.]'
        '--check-for-updates[Check whether a later version of SwiftLint is available after processing all files.]'
        '--version[Show the version.]'
        '(-h --help)'{-h,--help}'[Show help information.]'
    )
    _arguments -w -s -S $args[@] && ret=0

    return ret
}

_swiftlint_help() {
    integer ret=1
    local -a args
    args+=(
        ':subcommands:'
        '--version[Show the version.]'
    )
    _arguments -w -s -S $args[@] && ret=0

    return ret
}


_custom_completion() {
    local completions=("${(@f)$($*)}")
    _describe '' completions
}

_swiftlint
